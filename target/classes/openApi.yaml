openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Animals
    description: Управление данными животных
  - name: Animal Visited Locations
    description: "Операции по управлению локациями, которые посетило животное"
  - name: Accounts
    description: Управление учетными записями пользователей
  - name: Типы животных
    description: Управление типами животных
  - name: Локации
    description: Управление точками локаций
  - name: Registration
    description: Регистрация новых пользователей
paths:
  /locations/{pointId}:
    put:
      tags:
        - Локации
      summary: Обновить данные локации
      description: Обновляет данные локации и возвращает обновленные данные
      operationId: updateLocation
      parameters:
        - name: pointId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDtoRequest"
        required: true
      responses:
        "409":
          description: Точка локации с такими latitude и longitude уже сущесвтует
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "200":
          description: Локация успешно обновлена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "404":
          description: Точка локации с таким ID не найдена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
    delete:
      tags:
        - Локации
      summary: Удалить локацию
      description: удаляет локацию по ID
      operationId: deleteLocation
      parameters:
        - name: pointId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Невалидные параметры запроса
        "401":
          description: Неверные авторизационные данные
        "200":
          description: Локация успешно удалена
        "404":
          description: Точка локации с таким ID не найдена
  /animals/{animalId}:
    get:
      tags:
        - Animals
      summary: Получить животного
      description: Возвращает животного по его ID
      operationId: getAnimalById
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: Невалидные параметры запросы
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "404":
          description: Животное с ID не найдено
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
    put:
      tags:
        - Animals
      summary: Обновление животного
      description: Обновление животного по введенном параметрам
      operationId: updateAnimal
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalDtoUpdateRequest"
        required: true
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "404":
          description: "Животное с animalId не найдено, Аккаунт с chipperId не най\
            ден, Точка локации с chippingLocationId не найдена"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: "Невалидные параметры запросы, животное мертво, Новая точка\
            \ чипирования совпадает с первой посещенной точкой локации"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
    delete:
      tags:
        - Animals
      summary: Удаление животного
      description: Удаление животного по его ID
      operationId: deleteAnimal
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Запрос успешно выполнен
        "404":
          description: Животное с animalId не найдено
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
        "400":
          description: "Животное покинуло локацию чипирования, при этоместь другие\
            \ посещенные точки"
  /animals/{animalId}/types:
    put:
      tags:
        - Animals
      summary: Обновление типа животному
      description: Обновяет тип животному по введенным данным
      operationId: updateAnimalTypes
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalDtoUpdateTypeRequest"
        required: true
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "404":
          description: "Животное с animalId не найдено, Тип животного с oldTypeId\
            \ не найденТип животного с newTypeId не найденТипа животного с oldTypeId\
            \ нет у животного с animalId"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "409":
          description: Тип животного с newTypeId уже есть у животного с animalIdЖивотное
            с animalId уже имеет типы с oldTypeId и newTypeId
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: Невалидные параметры запросы
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
  /animals/{animalId}/locations:
    get:
      tags:
        - Animal Visited Locations
      summary: "Получить локации, которые посетило животное"
      description: "Возвращает список локаций, посещенных указанным животным, возм\
        ожно с фильтрацией по датам (startDateTime, endDateTime). Результат выводи\
        тся постранично (параметры from, size)."
      operationId: getVisitedLocations
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: startDateTime
          in: query
          required: false
          schema:
            type: string
        - name: endDateTime
          in: query
          required: false
          schema:
            type: string
        - name: from
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
      responses:
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "404":
          description: Животное не найдено
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "200":
          description: Список локаций успешно получен
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
    put:
      tags:
        - Animal Visited Locations
      summary: Обновить запись о посещенной локации
      description: "Обновляет детали посещенной локации у животного (к примеру, ес\
        ли нужно изменить дату или другое поле по логике)."
      operationId: updateVisitedLocation
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalVisitedLocationsDtoRequest"
        required: true
      responses:
        "400":
          description: "Невалидные параметры запроса, Обновление первой посещенной\
            \ точки на точку чипированияОбновление точки на такую же точкуОбновлен\
            ие точки локации на точку, совпадающую со следующей и/или с предыдущей\
            \ точками"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "404":
          description: Животное с animalId не найденоОбъект с информацией о посещенной
            точке локации с visitedLocationPointId не найден.У животного нет объекта
            с информацией о посещенной точке локации с visitedLocationPointId.Точка
            локации с locationPointId не найден
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "200":
          description: Данные локации успешно обновлены
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
  /animals/types/{typeId}:
    get:
      tags:
        - Типы животных
      summary: Получить тип животного
      description: Возвращает тип животного по ID
      operationId: getAnimalType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "404":
          description: Тип животного с таким ID не найден
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
    put:
      tags:
        - Типы животных
      summary: обновить тип животного
      description: обновляет тип животного по введенным параметрам
      operationId: updateAnimalType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalTypeDtoRequest"
        required: true
      responses:
        "401":
          description: "Неверные авторизационные данные, Неверные авторизационные\
            \ данные"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "404":
          description: Тип животного с таким ID не найден
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "409":
          description: Тип животного с таким type уже существует
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
    delete:
      tags:
        - Типы животных
      summary: удалить тип животного
      description: удаление типа животного по введенным параметрам
      operationId: deleteAnimalType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "401":
          description: "Неверные авторизационные данные, Неверные авторизационные\
            \ данные"
        "200":
          description: Запрос успешно выполнен
        "404":
          description: Тип животного с таким ID не найден
        "400":
          description: "Невалидные параметры запроса, Есть животные с типом с Id"
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Получить учетную запись по ID
      description: Возвращает данные учетной записи по ее ID
      operationId: getAccountId
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        "200":
          description: Учетная запись успешно найдена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "400":
          description: Некорректный ID
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "404":
          description: Аккаунт с таким accountId не найден
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
    put:
      tags:
        - Accounts
      summary: Обновить учетную запись
      description: Обновляет данные учетной записи по ее ID
      operationId: updateAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountDtoRequest"
        required: true
      responses:
        "200":
          description: Список учетных записей получен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "409":
          description: Аккаунт с таким email уже существует
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "403":
          description: "Обновление не своего аккаунта, аккаунт не найден"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
    delete:
      tags:
        - Accounts
      summary: Удалить учетную запись
      description: Удаляет учетную запись по ее ID
      operationId: deleteAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        "400":
          description: "Невалидные параметры запроса, Аккаунт связан с животным"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
        "200":
          description: Учетная запись успешно удалена
        "403":
          description: "Обновление не своего аккаунта, аккаунт не найден"
  /registration:
    post:
      tags:
        - Registration
      summary: Зарегистрироваться
      description: Регистрирует новых пользователй
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountDtoRequest"
        required: true
      responses:
        "201":
          description: Запрос усешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "403":
          description: Запрос от авторизованного аккаунта
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "400":
          description: Невалидные данные для регистрации
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
        "409":
          description: Аккаунт с таким email уже существует
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccountDtoResponse"
  /locations:
    post:
      tags:
        - Локации
      summary: Добавить локацию
      description: Создает новую локацию по введенным параметрам и возвращает добавленную
        локацию
      operationId: addLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDtoRequest"
        required: true
      responses:
        "409":
          description: Точка локации с такими latitude и longitude уже сущесвтует
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "201":
          description: Локация успешно создана
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
  /animals:
    post:
      tags:
        - Animals
      summary: Добавление животного
      description: Возвращает добавленное животного
      operationId: addAnimal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalDtoCreateRequest"
        required: true
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "409":
          description: Массив animalTypes содержит дубликаты
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "404":
          description: "Тип животного не найден, Аккаунт с chipperId не найден, То\
            чка локации с chippingLocationId не найдена"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: Невалидные параметры запросы
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
  /animals/{animalId}/types/{typeId}:
    post:
      tags:
        - Animals
      summary: Добавление типа животному
      description: Добавляет тип животному по ID
      operationId: addAnimalType
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: typeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "201":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "409":
          description: Тип животного с typeId уже есть у животного с animalId
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: Невалидные параметры запросы
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "404":
          description: "Животное с animalId не найдено, Тип животного с typeId не\
            \ найден"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
    delete:
      tags:
        - Animals
      summary: Удаление типа животному
      description: Удаляет тип животному по введенным данным
      operationId: deleteAnimalType_1
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: typeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: "Невалидные параметры запросы, У животного только один тип\
            \ и это тип с typeId"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
        "404":
          description: Животное с animalId не найденоТип животного с typeId не найденУ
            животного с animalId нет типа с typeId
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalDtoResponse"
  /animals/{animalId}/locations/{pointId}:
    post:
      tags:
        - Animal Visited Locations
      summary: Добавить новую посещенную локацию
      description: "Создает запись о том, что указанное животное посетило локацию\
        \ (pointId)."
      operationId: addVisitedLocation
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: pointId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "404":
          description: Животное с animalId не найденоТочка локации с pointId не найдена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "201":
          description: Локация успешно добавлена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "401":
          description: "Неверные авторизационные данные, Запрос от неавторизованно\
            го аккаунта"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
        "400":
          description: "Невалидные параметры запроса, Животное находится в точке ч\
            ипирования и никуда не перемещалось, попытка добавить точку локации, р\
            авную точке чипированияПопытка добавить точку локации, в которой уже н\
            аходится животное"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalVisitedLocationsDtoResponse"
  /animals/types:
    post:
      tags:
        - Типы животных
      summary: добавить тип животного
      description: Добавление типа животного по введенным параметрам
      operationId: addAnimalType_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalTypeDtoRequest"
        required: true
      responses:
        "401":
          description: "Неверные авторизационные данные, Неверные авторизационные\
            \ данные"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
        "409":
          description: Тип животного с таким type уже существует
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnimalTypeDtoResponse"
  /locations/{id}:
    get:
      tags:
        - Локации
      summary: Получение локации
      description: Возвращает локацию по ID
      operationId: getLocation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
        "404":
          description: Точка локации с таким ID не найдена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocationDtoResponse"
  /animals/search:
    get:
      tags:
        - Animals
      summary: Получить животных
      description: Возвращает список животных по его фильтрам
      operationId: getAnimalListById
      parameters:
        - name: startDateTime
          in: query
          required: false
          schema:
            type: string
        - name: endDateTime
          in: query
          required: false
          schema:
            type: string
        - name: chipperId
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: chippingLocationId
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: lifeStatus
          in: query
          required: false
          schema:
            type: string
            enum:
              - ALIVE
              - DEAD
        - name: gender
          in: query
          required: false
          schema:
            type: string
            enum:
              - MALE
              - FEMALE
              - OTHER
        - name: from
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
      responses:
        "200":
          description: Запрос успешно выполнен
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalDtoResponse"
        "400":
          description: Невалидные параметры запросы
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalDtoResponse"
  /accounts/search:
    get:
      tags:
        - Accounts
      summary: Поиск учетных записей
      description: "Позволяет искать учетные записи по имени, фамилии, email с паг\
        инацией"
      operationId: searchAccount
      parameters:
        - name: firstName
          in: query
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: from
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
      responses:
        "200":
          description: Список учетных записей получен
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountDtoResponse"
        "400":
          description: Невалидные параметры запроса
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountDtoResponse"
        "401":
          description: Неверные авторизационные данные
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountDtoResponse"
  /animals/{animalId}/locations/{visitedPointId}:
    delete:
      tags:
        - Animal Visited Locations
      summary: Удалить запись о посещенной локации
      description: Удаляет указанный идентификатор посещенной локации (visitedPointId)
        у животного.
      operationId: deleteVisitedLocation
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: visitedPointId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: "Запрос успешно выполнен(Если удаляется первая посещенная т\
            очка локации, а вторая точка совпадает с точкой чипирования, то она уд\
            аляется автоматически)"
        "400":
          description: Невалидные параметры запроса
        "404":
          description: |-
            Животное с animalId не найдено
            Объект с информацией о посещенной точке локации с visitedPointId не найден.
            У животного нет объекта с информацией о посещенной точке локации с visitedPointId
components:
  schemas:
    LocationDtoRequest:
      type: object
      properties:
        latitude:
          type: number
          format: double
          maximum: 90
          minimum: -90
        longitude:
          type: number
          format: double
          maximum: 180
          minimum: -180
      required:
        - latitude
        - longitude
    LocationDtoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    AnimalDtoUpdateRequest:
      type: object
      properties:
        weight:
          type: number
          format: double
          minimum: 0
        length:
          type: number
          format: double
          minimum: 0
        height:
          type: number
          format: double
          minimum: 0
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        chipperId:
          type: integer
          format: int32
          minimum: 1
        chippingLocationId:
          type: integer
          format: int64
          minimum: 1
        lifeStatus:
          type: string
          enum:
            - ALIVE
            - DEAD
      required:
        - chipperId
        - chippingLocationId
        - gender
        - height
        - length
        - lifeStatus
        - weight
    AnimalDtoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        animalTypes:
          type: array
          items:
            type: integer
            format: int64
        weight:
          type: number
          format: double
        length:
          type: number
          format: double
        height:
          type: number
          format: double
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        lifeStatus:
          type: string
          enum:
            - ALIVE
            - DEAD
        chippingDateTime:
          type: string
        chipperId:
          type: integer
          format: int32
        chippingLocationId:
          type: integer
          format: int64
        visitedLocations:
          type: array
          items:
            type: integer
            format: int64
        deathDateTime:
          type: string
    AnimalDtoUpdateTypeRequest:
      type: object
      properties:
        oldTypeId:
          type: integer
          format: int64
          minimum: 1
        newTypeId:
          type: integer
          format: int64
          minimum: 1
      required:
        - newTypeId
        - oldTypeId
    AnimalVisitedLocationsDtoRequest:
      type: object
      properties:
        visitedLocationPointId:
          type: integer
          format: int64
          minimum: 1
        locationPointId:
          type: integer
          format: int64
          minimum: 1
    AnimalVisitedLocationsDtoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dateTimeOfVisitLocationPoint:
          type: string
        locationPointId:
          type: integer
          format: int64
    AnimalTypeDtoRequest:
      type: object
      properties:
        type:
          type: string
      required:
        - type
    AnimalTypeDtoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
    AccountDtoRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - email
        - firstName
        - lastName
        - password
    AccountDtoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    AnimalDtoCreateRequest:
      type: object
      properties:
        animalTypes:
          type: array
          items:
            type: integer
            format: int64
            minimum: 1
        weight:
          type: number
          format: double
          minimum: 0
        length:
          type: number
          format: double
          minimum: 0
        height:
          type: number
          format: double
          minimum: 0
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        chipperId:
          type: integer
          format: int32
          minimum: 1
        chippingLocationId:
          type: integer
          format: int64
          minimum: 1
      required:
        - animalTypes
        - chipperId
        - chippingLocationId
        - gender
        - height
        - length
        - weight
