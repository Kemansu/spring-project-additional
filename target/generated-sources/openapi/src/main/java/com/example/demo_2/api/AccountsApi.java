/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo_2.api;

import com.example.demo_2.model.AccountDtoRequest;
import com.example.demo_2.model.AccountDtoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-10T07:29:23.447541+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Accounts", description = "Управление учетными записями пользователей")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /accounts/{accountId} : Удалить учетную запись
     * Удаляет учетную запись по ее ID
     *
     * @param accountId  (required)
     * @return Невалидные параметры запроса, Аккаунт связан с животным (status code 400)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Учетная запись успешно удалена (status code 200)
     *         or Обновление не своего аккаунта, аккаунт не найден (status code 403)
     */
    @Operation(
        operationId = "deleteAccount",
        summary = "Удалить учетную запись",
        description = "Удаляет учетную запись по ее ID",
        tags = { "Accounts" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса, Аккаунт связан с животным"),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта"),
            @ApiResponse(responseCode = "200", description = "Учетная запись успешно удалена"),
            @ApiResponse(responseCode = "403", description = "Обновление не своего аккаунта, аккаунт не найден")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/accounts/{accountId}"
    )
    default ResponseEntity<Void> deleteAccount(
        @DecimalMin("1") @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Object accountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{accountId} : Получить учетную запись по ID
     * Возвращает данные учетной записи по ее ID
     *
     * @param accountId  (required)
     * @return Учетная запись успешно найдена (status code 200)
     *         or Неверные авторизационные данные (status code 401)
     *         or Некорректный ID (status code 400)
     *         or Аккаунт с таким accountId не найден (status code 404)
     */
    @Operation(
        operationId = "getAccountId",
        summary = "Получить учетную запись по ID",
        description = "Возвращает данные учетной записи по ее ID",
        tags = { "Accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Учетная запись успешно найдена", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректный ID", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Аккаунт с таким accountId не найден", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{accountId}",
        produces = { "*/*" }
    )
    default ResponseEntity<AccountDtoResponse> getAccountId(
        @DecimalMin("1") @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Object accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"firstName\" : \"\", \"lastName\" : \"\", \"id\" : \"\", \"email\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/search : Поиск учетных записей
     * Позволяет искать учетные записи по имени, фамилии, email с пагинацией
     *
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param email  (optional)
     * @param from  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @return Список учетных записей получен (status code 200)
     *         or Невалидные параметры запроса (status code 400)
     *         or Неверные авторизационные данные (status code 401)
     */
    @Operation(
        operationId = "searchAccount",
        summary = "Поиск учетных записей",
        description = "Позволяет искать учетные записи по имени, фамилии, email с пагинацией",
        tags = { "Accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список учетных записей получен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/search",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> searchAccount(
        @Parameter(name = "firstName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstName", required = false) Object firstName,
        @Parameter(name = "lastName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastName", required = false) Object lastName,
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) Object email,
        @DecimalMin("0") @Parameter(name = "from", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false, defaultValue = "0") Object from,
        @DecimalMin("1") @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Object size
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accounts/{accountId} : Обновить учетную запись
     * Обновляет данные учетной записи по ее ID
     *
     * @param accountId  (required)
     * @param accountDtoRequest  (required)
     * @return Список учетных записей получен (status code 200)
     *         or Невалидные параметры запроса (status code 400)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Аккаунт с таким email уже существует (status code 409)
     *         or Обновление не своего аккаунта, аккаунт не найден (status code 403)
     */
    @Operation(
        operationId = "updateAccount",
        summary = "Обновить учетную запись",
        description = "Обновляет данные учетной записи по ее ID",
        tags = { "Accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список учетных записей получен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Аккаунт с таким email уже существует", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Обновление не своего аккаунта, аккаунт не найден", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/accounts/{accountId}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountDtoResponse> updateAccount(
        @DecimalMin("1") @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Object accountId,
        @Parameter(name = "AccountDtoRequest", description = "", required = true) @Valid @RequestBody AccountDtoRequest accountDtoRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"firstName\" : \"\", \"lastName\" : \"\", \"id\" : \"\", \"email\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
