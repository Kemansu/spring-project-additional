/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo_2.api;

import com.example.demo_2.model.AnimalDtoCreateRequest;
import com.example.demo_2.model.AnimalDtoResponse;
import com.example.demo_2.model.AnimalDtoUpdateRequest;
import com.example.demo_2.model.AnimalDtoUpdateTypeRequest;
import com.example.demo_2.model.AnimalTypeDtoRequest;
import com.example.demo_2.model.AnimalTypeDtoResponse;
import com.example.demo_2.model.AnimalVisitedLocationsDtoRequest;
import com.example.demo_2.model.AnimalVisitedLocationsDtoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-10T07:29:23.447541+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Animals", description = "Управление данными животных")
public interface AnimalsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /animals : Добавление животного
     * Возвращает добавленное животного
     *
     * @param animalDtoCreateRequest  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Массив animalTypes содержит дубликаты (status code 409)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Тип животного не найден, Аккаунт с chipperId не найден, Точка локации с chippingLocationId не найдена (status code 404)
     *         or Невалидные параметры запросы (status code 400)
     */
    @Operation(
        operationId = "addAnimal",
        summary = "Добавление животного",
        description = "Возвращает добавленное животного",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Массив animalTypes содержит дубликаты", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Тип животного не найден, Аккаунт с chipperId не найден, Точка локации с chippingLocationId не найдена", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/animals",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnimalDtoResponse> addAnimal(
        @Parameter(name = "AnimalDtoCreateRequest", description = "", required = true) @Valid @RequestBody AnimalDtoCreateRequest animalDtoCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"chippingDateTime\" : \"\", \"lifeStatus\" : \"\", \"gender\" : \"\", \"chipperId\" : \"\", \"animalTypes\" : \"\", \"length\" : \"\", \"chippingLocationId\" : \"\", \"weight\" : \"\", \"deathDateTime\" : \"\", \"id\" : \"\", \"visitedLocations\" : \"\", \"height\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /animals/{animalId}/types/{typeId} : Добавление типа животному
     * Добавляет тип животному по ID
     *
     * @param animalId  (required)
     * @param typeId  (required)
     * @return Запрос успешно выполнен (status code 201)
     *         or Тип животного с typeId уже есть у животного с animalId (status code 409)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Невалидные параметры запросы (status code 400)
     *         or Животное с animalId не найдено, Тип животного с typeId не найден (status code 404)
     */
    @Operation(
        operationId = "addAnimalType",
        summary = "Добавление типа животному",
        description = "Добавляет тип животному по ID",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Тип животного с typeId уже есть у животного с animalId", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найдено, Тип животного с typeId не найден", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/animals/{animalId}/types/{typeId}",
        produces = { "*/*" }
    )
    default ResponseEntity<AnimalDtoResponse> addAnimalType(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @DecimalMin("1") @Parameter(name = "typeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("typeId") Object typeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"chippingDateTime\" : \"\", \"lifeStatus\" : \"\", \"gender\" : \"\", \"chipperId\" : \"\", \"animalTypes\" : \"\", \"length\" : \"\", \"chippingLocationId\" : \"\", \"weight\" : \"\", \"deathDateTime\" : \"\", \"id\" : \"\", \"visitedLocations\" : \"\", \"height\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /animals/types : добавить тип животного
     * Добавление типа животного по введенным параметрам
     *
     * @param animalTypeDtoRequest  (required)
     * @return Неверные авторизационные данные, Неверные авторизационные данные (status code 401)
     *         or Запрос успешно выполнен (status code 200)
     *         or Невалидные параметры запроса (status code 400)
     *         or Тип животного с таким type уже существует (status code 409)
     */
    @Operation(
        operationId = "addAnimalType1",
        summary = "добавить тип животного",
        description = "Добавление типа животного по введенным параметрам",
        tags = { "Типы животных" },
        responses = {
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Тип животного с таким type уже существует", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/animals/types",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnimalTypeDtoResponse> addAnimalType1(
        @Parameter(name = "AnimalTypeDtoRequest", description = "", required = true) @Valid @RequestBody AnimalTypeDtoRequest animalTypeDtoRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"id\" : \"\", \"type\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /animals/{animalId}/locations/{pointId} : Добавить новую посещенную локацию
     * Создает запись о том, что указанное животное посетило локацию (pointId).
     *
     * @param animalId  (required)
     * @param pointId  (required)
     * @return Животное с animalId не найденоТочка локации с pointId не найдена (status code 404)
     *         or Локация успешно добавлена (status code 201)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Невалидные параметры запроса, Животное находится в точке чипирования и никуда не перемещалось, попытка добавить точку локации, равную точке чипированияПопытка добавить точку локации, в которой уже находится животное (status code 400)
     */
    @Operation(
        operationId = "addVisitedLocation",
        summary = "Добавить новую посещенную локацию",
        description = "Создает запись о том, что указанное животное посетило локацию (pointId).",
        tags = { "Animal Visited Locations" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найденоТочка локации с pointId не найдена", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            }),
            @ApiResponse(responseCode = "201", description = "Локация успешно добавлена", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса, Животное находится в точке чипирования и никуда не перемещалось, попытка добавить точку локации, равную точке чипированияПопытка добавить точку локации, в которой уже находится животное", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/animals/{animalId}/locations/{pointId}",
        produces = { "*/*" }
    )
    default ResponseEntity<AnimalVisitedLocationsDtoResponse> addVisitedLocation(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @DecimalMin("1") @Parameter(name = "pointId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("pointId") Object pointId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"dateTimeOfVisitLocationPoint\" : \"\", \"locationPointId\" : \"\", \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /animals/{animalId} : Удаление животного
     * Удаление животного по его ID
     *
     * @param animalId  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Животное с animalId не найдено (status code 404)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Животное покинуло локацию чипирования, при этоместь другие посещенные точки (status code 400)
     */
    @Operation(
        operationId = "deleteAnimal",
        summary = "Удаление животного",
        description = "Удаление животного по его ID",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен"),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найдено"),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта"),
            @ApiResponse(responseCode = "400", description = "Животное покинуло локацию чипирования, при этоместь другие посещенные точки")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/animals/{animalId}"
    )
    default ResponseEntity<Void> deleteAnimal(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /animals/types/{typeId} : удалить тип животного
     * удаление типа животного по введенным параметрам
     *
     * @param typeId  (required)
     * @return Неверные авторизационные данные, Неверные авторизационные данные (status code 401)
     *         or Запрос успешно выполнен (status code 200)
     *         or Тип животного с таким ID не найден (status code 404)
     *         or Невалидные параметры запроса, Есть животные с типом с Id (status code 400)
     */
    @Operation(
        operationId = "deleteAnimalType",
        summary = "удалить тип животного",
        description = "удаление типа животного по введенным параметрам",
        tags = { "Типы животных" },
        responses = {
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Неверные авторизационные данные"),
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен"),
            @ApiResponse(responseCode = "404", description = "Тип животного с таким ID не найден"),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса, Есть животные с типом с Id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/animals/types/{typeId}"
    )
    default ResponseEntity<Void> deleteAnimalType(
        @DecimalMin("1") @Parameter(name = "typeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("typeId") Object typeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /animals/{animalId}/types/{typeId} : Удаление типа животному
     * Удаляет тип животному по введенным данным
     *
     * @param animalId  (required)
     * @param typeId  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Невалидные параметры запросы, У животного только один тип и это тип с typeId (status code 400)
     *         or Животное с animalId не найденоТип животного с typeId не найденУ животного с animalId нет типа с typeId (status code 404)
     */
    @Operation(
        operationId = "deleteAnimalType1",
        summary = "Удаление типа животному",
        description = "Удаляет тип животному по введенным данным",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы, У животного только один тип и это тип с typeId", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найденоТип животного с typeId не найденУ животного с animalId нет типа с typeId", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/animals/{animalId}/types/{typeId}",
        produces = { "*/*" }
    )
    default ResponseEntity<AnimalDtoResponse> deleteAnimalType1(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @DecimalMin("1") @Parameter(name = "typeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("typeId") Object typeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"chippingDateTime\" : \"\", \"lifeStatus\" : \"\", \"gender\" : \"\", \"chipperId\" : \"\", \"animalTypes\" : \"\", \"length\" : \"\", \"chippingLocationId\" : \"\", \"weight\" : \"\", \"deathDateTime\" : \"\", \"id\" : \"\", \"visitedLocations\" : \"\", \"height\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /animals/{animalId}/locations/{visitedPointId} : Удалить запись о посещенной локации
     * Удаляет указанный идентификатор посещенной локации (visitedPointId) у животного.
     *
     * @param animalId  (required)
     * @param visitedPointId  (required)
     * @return Запрос успешно выполнен(Если удаляется первая посещенная точка локации, а вторая точка совпадает с точкой чипирования, то она удаляется автоматически) (status code 200)
     *         or Невалидные параметры запроса (status code 400)
     *         or Животное с animalId не найдено Объект с информацией о посещенной точке локации с visitedPointId не найден. У животного нет объекта с информацией о посещенной точке локации с visitedPointId (status code 404)
     */
    @Operation(
        operationId = "deleteVisitedLocation",
        summary = "Удалить запись о посещенной локации",
        description = "Удаляет указанный идентификатор посещенной локации (visitedPointId) у животного.",
        tags = { "Animal Visited Locations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен(Если удаляется первая посещенная точка локации, а вторая точка совпадает с точкой чипирования, то она удаляется автоматически)"),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса"),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найдено Объект с информацией о посещенной точке локации с visitedPointId не найден. У животного нет объекта с информацией о посещенной точке локации с visitedPointId")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/animals/{animalId}/locations/{visitedPointId}"
    )
    default ResponseEntity<Void> deleteVisitedLocation(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @DecimalMin("1") @Parameter(name = "visitedPointId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("visitedPointId") Object visitedPointId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /animals/{animalId} : Получить животного
     * Возвращает животного по его ID
     *
     * @param animalId  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Неверные авторизационные данные (status code 401)
     *         or Невалидные параметры запросы (status code 400)
     *         or Животное с ID не найдено (status code 404)
     */
    @Operation(
        operationId = "getAnimalById",
        summary = "Получить животного",
        description = "Возвращает животного по его ID",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное с ID не найдено", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/animals/{animalId}",
        produces = { "*/*" }
    )
    default ResponseEntity<AnimalDtoResponse> getAnimalById(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"chippingDateTime\" : \"\", \"lifeStatus\" : \"\", \"gender\" : \"\", \"chipperId\" : \"\", \"animalTypes\" : \"\", \"length\" : \"\", \"chippingLocationId\" : \"\", \"weight\" : \"\", \"deathDateTime\" : \"\", \"id\" : \"\", \"visitedLocations\" : \"\", \"height\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /animals/search : Получить животных
     * Возвращает список животных по его фильтрам
     *
     * @param startDateTime  (optional)
     * @param endDateTime  (optional)
     * @param chipperId  (optional)
     * @param chippingLocationId  (optional)
     * @param lifeStatus  (optional)
     * @param gender  (optional)
     * @param from  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @return Запрос успешно выполнен (status code 200)
     *         or Неверные авторизационные данные (status code 401)
     *         or Невалидные параметры запросы (status code 400)
     */
    @Operation(
        operationId = "getAnimalListById",
        summary = "Получить животных",
        description = "Возвращает список животных по его фильтрам",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/animals/search",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> getAnimalListById(
        @Parameter(name = "startDateTime", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDateTime", required = false) Object startDateTime,
        @Parameter(name = "endDateTime", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDateTime", required = false) Object endDateTime,
        @DecimalMin("1") @Parameter(name = "chipperId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "chipperId", required = false) Object chipperId,
        @DecimalMin("1") @Parameter(name = "chippingLocationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "chippingLocationId", required = false) Object chippingLocationId,
        @Parameter(name = "lifeStatus", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lifeStatus", required = false) Object lifeStatus,
        @Parameter(name = "gender", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gender", required = false) Object gender,
        @DecimalMin("0") @Parameter(name = "from", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false, defaultValue = "0") Object from,
        @DecimalMin("1") @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Object size
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /animals/types/{typeId} : Получить тип животного
     * Возвращает тип животного по ID
     *
     * @param typeId  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Тип животного с таким ID не найден (status code 404)
     *         or Невалидные параметры запроса (status code 400)
     *         or Неверные авторизационные данные (status code 401)
     */
    @Operation(
        operationId = "getAnimalType",
        summary = "Получить тип животного",
        description = "Возвращает тип животного по ID",
        tags = { "Типы животных" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Тип животного с таким ID не найден", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/animals/types/{typeId}",
        produces = { "*/*" }
    )
    default ResponseEntity<AnimalTypeDtoResponse> getAnimalType(
        @DecimalMin("1") @Parameter(name = "typeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("typeId") Object typeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"id\" : \"\", \"type\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /animals/{animalId}/locations : Получить локации, которые посетило животное
     * Возвращает список локаций, посещенных указанным животным, возможно с фильтрацией по датам (startDateTime, endDateTime). Результат выводится постранично (параметры from, size).
     *
     * @param animalId  (required)
     * @param startDateTime  (optional)
     * @param endDateTime  (optional)
     * @param from  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @return Невалидные параметры запроса (status code 400)
     *         or Неверные авторизационные данные (status code 401)
     *         or Животное не найдено (status code 404)
     *         or Список локаций успешно получен (status code 200)
     */
    @Operation(
        operationId = "getVisitedLocations",
        summary = "Получить локации, которые посетило животное",
        description = "Возвращает список локаций, посещенных указанным животным, возможно с фильтрацией по датам (startDateTime, endDateTime). Результат выводится постранично (параметры from, size).",
        tags = { "Animal Visited Locations" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное не найдено", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "200", description = "Список локаций успешно получен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/animals/{animalId}/locations",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> getVisitedLocations(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @Parameter(name = "startDateTime", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDateTime", required = false) Object startDateTime,
        @Parameter(name = "endDateTime", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDateTime", required = false) Object endDateTime,
        @DecimalMin("0") @Parameter(name = "from", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false, defaultValue = "0") Object from,
        @DecimalMin("1") @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Object size
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /animals/{animalId} : Обновление животного
     * Обновление животного по введенном параметрам
     *
     * @param animalId  (required)
     * @param animalDtoUpdateRequest  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Животное с animalId не найдено, Аккаунт с chipperId не найден, Точка локации с chippingLocationId не найдена (status code 404)
     *         or Невалидные параметры запросы, животное мертво, Новая точка чипирования совпадает с первой посещенной точкой локации (status code 400)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     */
    @Operation(
        operationId = "updateAnimal",
        summary = "Обновление животного",
        description = "Обновление животного по введенном параметрам",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найдено, Аккаунт с chipperId не найден, Точка локации с chippingLocationId не найдена", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы, животное мертво, Новая точка чипирования совпадает с первой посещенной точкой локации", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/animals/{animalId}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnimalDtoResponse> updateAnimal(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @Parameter(name = "AnimalDtoUpdateRequest", description = "", required = true) @Valid @RequestBody AnimalDtoUpdateRequest animalDtoUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"chippingDateTime\" : \"\", \"lifeStatus\" : \"\", \"gender\" : \"\", \"chipperId\" : \"\", \"animalTypes\" : \"\", \"length\" : \"\", \"chippingLocationId\" : \"\", \"weight\" : \"\", \"deathDateTime\" : \"\", \"id\" : \"\", \"visitedLocations\" : \"\", \"height\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /animals/types/{typeId} : обновить тип животного
     * обновляет тип животного по введенным параметрам
     *
     * @param typeId  (required)
     * @param animalTypeDtoRequest  (required)
     * @return Неверные авторизационные данные, Неверные авторизационные данные (status code 401)
     *         or Запрос успешно выполнен (status code 200)
     *         or Тип животного с таким ID не найден (status code 404)
     *         or Невалидные параметры запроса (status code 400)
     *         or Тип животного с таким type уже существует (status code 409)
     */
    @Operation(
        operationId = "updateAnimalType",
        summary = "обновить тип животного",
        description = "обновляет тип животного по введенным параметрам",
        tags = { "Типы животных" },
        responses = {
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Неверные авторизационные данные", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Тип животного с таким ID не найден", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Тип животного с таким type уже существует", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalTypeDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/animals/types/{typeId}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnimalTypeDtoResponse> updateAnimalType(
        @DecimalMin("1") @Parameter(name = "typeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("typeId") Object typeId,
        @Parameter(name = "AnimalTypeDtoRequest", description = "", required = true) @Valid @RequestBody AnimalTypeDtoRequest animalTypeDtoRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"id\" : \"\", \"type\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /animals/{animalId}/types : Обновление типа животному
     * Обновяет тип животному по введенным данным
     *
     * @param animalId  (required)
     * @param animalDtoUpdateTypeRequest  (required)
     * @return Запрос успешно выполнен (status code 200)
     *         or Животное с animalId не найдено, Тип животного с oldTypeId не найденТип животного с newTypeId не найденТипа животного с oldTypeId нет у животного с animalId (status code 404)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Тип животного с newTypeId уже есть у животного с animalIdЖивотное с animalId уже имеет типы с oldTypeId и newTypeId (status code 409)
     *         or Невалидные параметры запросы (status code 400)
     */
    @Operation(
        operationId = "updateAnimalTypes",
        summary = "Обновление типа животному",
        description = "Обновяет тип животному по введенным данным",
        tags = { "Animals" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос успешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найдено, Тип животного с oldTypeId не найденТип животного с newTypeId не найденТипа животного с oldTypeId нет у животного с animalId", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Тип животного с newTypeId уже есть у животного с animalIdЖивотное с animalId уже имеет типы с oldTypeId и newTypeId", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запросы", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/animals/{animalId}/types",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnimalDtoResponse> updateAnimalTypes(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @Parameter(name = "AnimalDtoUpdateTypeRequest", description = "", required = true) @Valid @RequestBody AnimalDtoUpdateTypeRequest animalDtoUpdateTypeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"chippingDateTime\" : \"\", \"lifeStatus\" : \"\", \"gender\" : \"\", \"chipperId\" : \"\", \"animalTypes\" : \"\", \"length\" : \"\", \"chippingLocationId\" : \"\", \"weight\" : \"\", \"deathDateTime\" : \"\", \"id\" : \"\", \"visitedLocations\" : \"\", \"height\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /animals/{animalId}/locations : Обновить запись о посещенной локации
     * Обновляет детали посещенной локации у животного (к примеру, если нужно изменить дату или другое поле по логике).
     *
     * @param animalId  (required)
     * @param animalVisitedLocationsDtoRequest  (required)
     * @return Невалидные параметры запроса, Обновление первой посещенной точки на точку чипированияОбновление точки на такую же точкуОбновление точки локации на точку, совпадающую со следующей и/или с предыдущей точками (status code 400)
     *         or Животное с animalId не найденоОбъект с информацией о посещенной точке локации с visitedLocationPointId не найден.У животного нет объекта с информацией о посещенной точке локации с visitedLocationPointId.Точка локации с locationPointId не найден (status code 404)
     *         or Неверные авторизационные данные, Запрос от неавторизованного аккаунта (status code 401)
     *         or Данные локации успешно обновлены (status code 200)
     */
    @Operation(
        operationId = "updateVisitedLocation",
        summary = "Обновить запись о посещенной локации",
        description = "Обновляет детали посещенной локации у животного (к примеру, если нужно изменить дату или другое поле по логике).",
        tags = { "Animal Visited Locations" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Невалидные параметры запроса, Обновление первой посещенной точки на точку чипированияОбновление точки на такую же точкуОбновление точки локации на точку, совпадающую со следующей и/или с предыдущей точками", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Животное с animalId не найденоОбъект с информацией о посещенной точке локации с visitedLocationPointId не найден.У животного нет объекта с информацией о посещенной точке локации с visitedLocationPointId.Точка локации с locationPointId не найден", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Неверные авторизационные данные, Запрос от неавторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            }),
            @ApiResponse(responseCode = "200", description = "Данные локации успешно обновлены", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AnimalVisitedLocationsDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/animals/{animalId}/locations",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnimalVisitedLocationsDtoResponse> updateVisitedLocation(
        @DecimalMin("1") @Parameter(name = "animalId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("animalId") Object animalId,
        @Parameter(name = "AnimalVisitedLocationsDtoRequest", description = "", required = true) @Valid @RequestBody AnimalVisitedLocationsDtoRequest animalVisitedLocationsDtoRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"dateTimeOfVisitLocationPoint\" : \"\", \"locationPointId\" : \"\", \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
