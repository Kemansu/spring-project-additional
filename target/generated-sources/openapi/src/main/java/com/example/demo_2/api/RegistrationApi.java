/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo_2.api;

import com.example.demo_2.model.AccountDtoRequest;
import com.example.demo_2.model.AccountDtoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-10T07:29:23.447541+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Registration", description = "Регистрация новых пользователей")
public interface RegistrationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /registration : Зарегистрироваться
     * Регистрирует новых пользователй
     *
     * @param accountDtoRequest  (required)
     * @return Запрос усешно выполнен (status code 201)
     *         or Запрос от авторизованного аккаунта (status code 403)
     *         or Невалидные данные для регистрации (status code 400)
     *         or Аккаунт с таким email уже существует (status code 409)
     */
    @Operation(
        operationId = "register",
        summary = "Зарегистрироваться",
        description = "Регистрирует новых пользователй",
        tags = { "Registration" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Запрос усешно выполнен", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Запрос от авторизованного аккаунта", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные для регистрации", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Аккаунт с таким email уже существует", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccountDtoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/registration",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountDtoResponse> register(
        @Parameter(name = "AccountDtoRequest", description = "", required = true) @Valid @RequestBody AccountDtoRequest accountDtoRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"firstName\" : \"\", \"lastName\" : \"\", \"id\" : \"\", \"email\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
